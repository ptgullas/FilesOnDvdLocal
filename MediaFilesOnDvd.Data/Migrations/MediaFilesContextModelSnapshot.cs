// <auto-generated />
using System;
using MediaFilesOnDvd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediaFilesOnDvd.Data.Migrations
{
    [DbContext(typeof(MediaFilesContext))]
    partial class MediaFilesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("MediaFilePerformer", b =>
                {
                    b.Property<int>("MediaFilesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MediaFilesId", "PerformersId");

                    b.HasIndex("PerformersId");

                    b.ToTable("PerformerMediaFile", (string)null);
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.Disc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WalletId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Discs");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUnwatched")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnknownPerformerCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiscId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.Performer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.PerformerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PerformerTypes");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.ScreenshotUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PerformerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PerformerId");

                    b.ToTable("ScreenshotUrls");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.Wallet", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StorageUnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("MediaFilePerformer", b =>
                {
                    b.HasOne("MediaFilesOnDvd.Data.Entities.MediaFile", null)
                        .WithMany()
                        .HasForeignKey("MediaFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaFilesOnDvd.Data.Entities.Performer", null)
                        .WithMany()
                        .HasForeignKey("PerformersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.Disc", b =>
                {
                    b.HasOne("MediaFilesOnDvd.Data.Entities.Wallet", "Wallet")
                        .WithMany("Discs")
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.MediaFile", b =>
                {
                    b.HasOne("MediaFilesOnDvd.Data.Entities.Disc", "Disc")
                        .WithMany()
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disc");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.ScreenshotUrl", b =>
                {
                    b.HasOne("MediaFilesOnDvd.Data.Entities.Performer", null)
                        .WithMany("ImageUrls")
                        .HasForeignKey("PerformerId");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.Performer", b =>
                {
                    b.Navigation("ImageUrls");
                });

            modelBuilder.Entity("MediaFilesOnDvd.Data.Entities.Wallet", b =>
                {
                    b.Navigation("Discs");
                });
#pragma warning restore 612, 618
        }
    }
}
